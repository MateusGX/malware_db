using System;
using System.Security.Cryptography;
using System.Xml;
using System.IO;
using System.Threading;
using System.Collections.Generic;
using System.Text;

namespace Malware_DB
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;
            Console.InputEncoding = Encoding.UTF8;

            Config config = new Config();
            do {
                Console.Clear();
                Console.WriteLine(" Malware_DB by MateusGX");
                if (config.loginError)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine(" Invalid login or password!");
                    Console.ResetColor();
                }
                Console.Write(" login:");
                config.user = Console.ReadLine();
                Console.Write(" password:");
                config.pass = Console.ReadLine();
            } while (new Authentication(config).isValid());
            Console.Clear();

            config.mwKey = Convert.FromBase64String("rjFykDMnDfa2LrO+611ZEeTlKkrLEjDmSWwVaHHiBkw=");
            config.mwIV = Convert.FromBase64String("Q6MNmemyG5yGSfzw8oYjdA==");
            config.contentKey = Convert.FromBase64String("Ebwsc/pp3ZocExzh7V2lq+NVOffF+ERY+8tThSkgqzI=");
            config.contentIV = Convert.FromBase64String("ZYP8hkLWpocXhNbH/bDrnQ==");
            Functions functions = new Functions(config);

            XmlDocument xml = new XmlDocument();
            string content =  functions.decrypt(File.ReadAllBytes("data.mgx"), true);
            xml.LoadXml(content);
            XmlNodeList nodeList = xml.GetElementsByTagName("Malware");
            foreach (XmlNode x in nodeList)
            {
                Malware malware = new Malware();
                malware.Name = x["Name"].InnerText;
                malware.Hash = x["Hash"].InnerText;
                malware.FileName = x["FileName"].InnerText;
                malware.Version = x["Version"].InnerText;
                malware.Platform = x["Platform"].InnerText;
                malware.Architecture = x["Architecture"].InnerText;
                malware.Language = x["Language"].InnerText;
                malware.Type = x["Type"].InnerText;
                malware.Author = x["Author"].InnerText;
                malware.Date = x["Date"].InnerText;
                config.mw.Add(malware);
            }
            for (int i = 0; i < config.mw.Count; i++)
            {
                string path = "data/" + config.mw[i].Hash + ".mgx";
                if (File.Exists(path))
                {
                    functions.writeLine(config.mw[i].Hash + ".mgx [OK]", Functions.wType.File);
                    Thread.Sleep(30);
                }
                else
                {
                    functions.writeLine(config.mw[i].Hash + ".mgx [ERROR]", Functions.wType.Error);
                    Thread.Sleep(1000);
                    functions.runCommand(("exit").Split(' '));
                }
            }
            Console.Clear();
            functions.showTitle();
            while (true)
            {
                string[] command = functions.readLine();
                if (!functions.runCommand(command))
                {
                    functions.writeLine("Command not found!", Functions.wType.Error);
                }
            }
        }
    }
    public class Malware
    {
        public string Name = "";
        public string Hash = "";
        public string FileName = "";
        public string Version = "";
        public string Platform = "";
        public string Architecture = "";
        public string Language = "";
        public string Type = "";
        public string Author = "";
        public string Date = "";
    }
}
