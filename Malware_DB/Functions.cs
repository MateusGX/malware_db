using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.IO;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
namespace Malware_DB
{
    class Functions
    {
        public enum wType { Error, Info, Success, Default, File }
        public Config _config;
        private bool optValid = false;
        private int _opt = -1;
        private string input = "";
        public Functions(Config config)
        {
            _config = config;
        }
        public void showTitle()
        {
            Console.WriteLine(@"
 ███╗   ███╗ █████╗ ██╗     ██╗    ██╗ █████╗ ██████╗ ███████╗        ██████╗ ██████╗ 
 ████╗ ████║██╔══██╗██║     ██║    ██║██╔══██╗██╔══██╗██╔════╝        ██╔══██╗██╔══██╗
 ██╔████╔██║███████║██║     ██║ █╗ ██║███████║██████╔╝█████╗          ██║  ██║██████╔╝
 ██║╚██╔╝██║██╔══██║██║     ██║███╗██║██╔══██║██╔══██╗██╔══╝          ██║  ██║██╔══██╗
 ██║ ╚═╝ ██║██║  ██║███████╗╚███╔███╔╝██║  ██║██║  ██║███████╗███████╗██████╔╝██████╔╝
 ╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝ ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═════╝ ╚═════╝ 
 by MateusGX
");
        }
        public string[] readLine()
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write(" ╔═[");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.Write(_config.user);
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write("]═[");
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.Write("~");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("]");
            Console.Write(" ╚═══►");
            Console.ResetColor();
            string input = Console.ReadLine();
            return input.Split(' ');
        }
        public bool runCommand(string[] command)
        {
            if (command[0] == "help")
            {
                writeLine("==== SYSTEM ====", wType.Success);
                writeLine("help", wType.Success, "List all commands");
                writeLine("clear", wType.Success, "Clear console");
                writeLine("exit", wType.Success, "Exit application", true);
                writeLine("==== APP ====", wType.Success);
                writeLine("db", wType.Success, "Parameters: \n     -a Shows all malware\n     -p Starts search mode");
                writeLine("get", wType.Success, "Parameters: \n     -i Returns information about the malware\n     -d Gets the selected malware (DANGER)");
                writeLine("select", wType.Success, "Select malware: select ID");
                writeLine("get_info", wType.Success, "Returns information about the malware");
                writeLine("update", wType.Success, "Updates the database and the application", true);
                return true;
            }
            else if (command[0] == "clear")
            {
                Console.Clear();
                Console.Write("\n");
                return true;
            }
            else if (command[0] == "exit")
            {
                writeLine("Bye!", wType.Success);
                Thread.Sleep(1000);
                Environment.Exit(0);
                return true;
            }
            else if (command[0] == "db")
            {
                List<int> IDs = new List<int>(); 
                for (int i = 0; i < _config.mw.Count; i++)
                {
                    if(command.Length >= 2)
                    {
                        if(command[1] == "-p")
                        {
                            while (!optValid)
                            {
                                writeLine("Select the search mode:", wType.Success, "1: Name\n   2: Platform\n   3: Architecture\n   4: Language\n   5: Type\n   6: Author\n  99: Back");
                                Console.Write("\n >>");
                                string opt = Console.ReadLine();
                                Console.Write("\n");
                                switch (opt)
                                {
                                    case "1":
                                        writeLine("Enter search term:", wType.Success);
                                        Console.Write(" >>");
                                        input = Console.ReadLine().ToUpper();
                                        _opt = 1;
                                        optValid = true;
                                        break;
                                    case "2":
                                        writeLine("Enter search term:", wType.Success);
                                        Console.Write(" >>");
                                        input = Console.ReadLine().ToUpper();
                                        _opt = 2;
                                        optValid = true;
                                        break;
                                    case "3":
                                        writeLine("Enter search term:", wType.Success);
                                        Console.Write(" >>");
                                        input = Console.ReadLine().ToUpper();
                                        _opt = 3;
                                        optValid = true;
                                        break;
                                    case "4":
                                        writeLine("Enter search term:", wType.Success);
                                        Console.Write(" >>");
                                        input = Console.ReadLine().ToUpper();
                                        _opt = 4;
                                        optValid = true;
                                        break;
                                    case "5":
                                        writeLine("Enter search term:", wType.Success);
                                        Console.Write(" >>");
                                        input = Console.ReadLine().ToUpper();
                                        _opt = 5;
                                        optValid = true;
                                        break;
                                    case "6":
                                        writeLine("Enter search term:", wType.Success);
                                        Console.Write(" >>");
                                        input = Console.ReadLine().ToUpper();
                                        _opt = 6;
                                        optValid = true;
                                        break;
                                    case "99":
                                        optValid = true;
                                        break;
                                    default:
                                        writeLine("Option invalid!", wType.Error);
                                        break;
                                }
                            }
                            if(_opt == 1)
                            {
                                if (input == _config.mw[i].Name.ToUpper())
                                {
                                    IDs.Add(i);
                                }
                            }
                            else if(_opt == 2)
                            {
                                if (input == _config.mw[i].Platform.ToUpper())
                                {
                                    IDs.Add(i);
                                }
                            }
                            else if (_opt == 3)
                            {
                                if (input == _config.mw[i].Architecture.ToUpper())
                                {
                                    IDs.Add(i);
                                }
                            }
                            else if (_opt == 4)
                            {
                                if (input == _config.mw[i].Language.ToUpper())
                                {
                                    IDs.Add(i);
                                }
                            }
                            else if (_opt == 5)
                            {
                                if (input == _config.mw[i].Type.ToUpper())
                                {
                                    IDs.Add(i);
                                }
                            }
                            else if (_opt == 6)
                            {
                                if (input == _config.mw[i].Author.ToUpper())
                                {
                                    IDs.Add(i);
                                }
                            }
                        }
                        else if (command[1] == "-a")
                        {
                            IDs.Add(i);
                        }
                        else
                        {
                            writeLine("Invalid parameter!", wType.Error);
                            break;
                        }
                    }
                    else
                    {
                        writeLine("No parameters!", wType.Error);
                        break;
                    }
                }
                if (IDs.Count >= 1)
                {
                    writeTable(IDs.ToArray());
                }
                else if(optValid)
                {
                    writeLine("\n No results were found!", wType.Info);
                }
                input = "";
                optValid = false;
                _opt = -1;
                return true;
            }
            else if (command[0] == "select")
            {
                if(command.Length >= 2)
                {
                    
                    if (int.TryParse(command[1], out int i) && ((int.Parse(command[1]) >= 0) && (int.Parse(command[1]) <= (_config.mw.Count - 1))))
                    {
                        _config.selected_mw = i;
                        writeLine("Selected malware!", wType.Success);
                    }
                    else
                    {
                        writeLine("Invalid ID!", wType.Error);
                    }
                }
                else
                {
                    writeLine("Enter the malware ID!", wType.Error);
                }
                return true;
            }
            else if (command[0] == "get")
            {
                if (command.Length >= 2)
                {
                    if (command[1] == "-i")
                    {
                        if (_config.selected_mw != -1)
                        {
                            writeLine("Name", wType.Success, _config.mw[_config.selected_mw].Name);
                            writeLine("Hash", wType.Success, _config.mw[_config.selected_mw].Hash);
                            writeLine("Version", wType.Success, _config.mw[_config.selected_mw].Version);
                            writeLine("Platform", wType.Success, _config.mw[_config.selected_mw].Platform);
                            writeLine("Architecture", wType.Success, _config.mw[_config.selected_mw].Architecture);
                            writeLine("Language", wType.Success, _config.mw[_config.selected_mw].Language);
                            writeLine("Type", wType.Success, _config.mw[_config.selected_mw].Type);
                            writeLine("Author", wType.Success, _config.mw[_config.selected_mw].Author);
                            writeLine("Date", wType.Success, _config.mw[_config.selected_mw].Date, true);
                        }
                        else
                        {
                            writeLine("Malware not selected!", wType.Error);
                        }
                    }
                    else if (command[1] == "-d")
                    {
                        if (_config.selected_mw != -1)
                        {
                            SHA256 sha256 = SHA256.Create();
                            string data = decrypt(File.ReadAllBytes("data/" + _config.mw[_config.selected_mw].Hash + ".mgx"));
                            File.WriteAllBytes(_config.mw[_config.selected_mw].FileName, Convert.FromBase64String(data));
                            using (FileStream file = File.OpenRead(_config.mw[_config.selected_mw].FileName))
                            {
                                string result = "";
                                byte[] _bytes = sha256.ComputeHash(file);
                                foreach (byte b in _bytes)
                                {
                                    result += b.ToString("x2");
                                }
                                if (result == _config.mw[_config.selected_mw].Hash)
                                {
                                    progress(100);
                                }
                                else
                                {
                                    writeLine("Corrupted file!\n", wType.Error);
                                    File.Delete(_config.mw[_config.selected_mw].FileName);
                                }
                            }
                        }
                        else
                        {
                            writeLine("Malware not selected!", wType.Error);
                        }
                    }
                    else
                    {
                        writeLine("Invalid parameter!", wType.Error);
                    }
                }
                else
                {
                    writeLine("No parameters!", wType.Error);
                }
                return true;
            }
            else if (command[0] == "update")
            {
                return true;
            }
            return false;
        }
        private void writeTable(int[] IDs)
        {
            Console.WriteLine(" ╔══════╦════════════════════════════════════════════════╦═══════════════╦════════════╦══════════════════╦══════════╗ ");
            Console.WriteLine(" ║  ID  ║                      NAME                      ║    VERSION    ║  PLATFORM  ║      AUTHOR      ║   DATE   ║ ");
            Console.WriteLine(" ╠══════╬════════════════════════════════════════════════╬═══════════════╬════════════╬══════════════════╬══════════╣ ");
            for (int i = 0; i < IDs.Length; i++)
            {
                string id = IDs[i].ToString();
                while (id.Length < 4)
                {
                    id = "0" + id;
                }
                string name = String.Format("{0,-48}", _config.mw[IDs[i]].Name);
                string version, platform, author = "NA";
                if (_config.mw[IDs[i]].Version.Length > 15)
                {
                    version = String.Format("{0,-15}", (_config.mw[IDs[i]].Version.Substring(0, 12) + "..."));
                }
                else
                {
                    version = String.Format("{0,-15}", _config.mw[IDs[i]].Version);
                }
                if (_config.mw[IDs[i]].Version.Length > 12)
                {
                    platform = String.Format("{0,-12}", (_config.mw[IDs[i]].Version.Substring(0, 9) + "..."));
                }
                else
                {
                    platform = String.Format("{0,-12}", _config.mw[IDs[i]].Version);
                }
                if (_config.mw[IDs[i]].Version.Length > 18)
                {
                    author = String.Format("{0,-18}", (_config.mw[IDs[i]].Version.Substring(0, 15) + "..."));
                }
                else
                {
                    author = String.Format("{0,-18}", _config.mw[IDs[i]].Version);
                }
                string date = String.Format("{0,-10}", _config.mw[IDs[i]].Date);
                Console.WriteLine(" ║ " + id + " ║" + name + "║" + version + "║" + platform + "║" + author + "║" + date + "║ ");
                if ((IDs.Length - 1) == i)
                {
                    Console.WriteLine(" ╚══════╩════════════════════════════════════════════════╩═══════════════╩════════════╩══════════════════╩══════════╝ ");
                }
                else
                {
                    Console.WriteLine(" ╠══════╬════════════════════════════════════════════════╬═══════════════╬════════════╬══════════════════╬══════════╣ ");
                }
            }
        }
        public void writeLine(string content, wType type, string info = "", bool lb = false)
        {
            if (type == wType.Error)
            {
                Console.ForegroundColor = ConsoleColor.Red;
            }
            else if (type == wType.Info)
            {
                Console.ForegroundColor = ConsoleColor.Cyan;
            }
            else if ((type == wType.Success) || (type == wType.File))
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
            }
            else if (type == wType.Default)
            {
                Console.ForegroundColor = ConsoleColor.White;
            }
            Console.WriteLine(" " + content);
            if (info != "")
            {
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.Write("   " + info);
            }
            if (lb)
            {
                Console.Write("\n\n");
            }
            else if(type != wType.File)
            {
                Console.Write("\n");
            }
            Console.ResetColor();
        }
        public void progress(int _progress)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write("\n [");
            for (int i = 0; i < _progress; i++)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Write("#");
            }
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write("]");
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write(" - ");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.Write(_progress + "%\n\n");
            Console.ResetColor();
        }
        public string decrypt(byte[] data, bool content = false)
        {
            string result;
            if (!content)
            {
                using (AesManaged aes = new AesManaged())
                {
                    aes.Key = _config.mwKey;
                    aes.IV = _config.mwIV;
                    ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
                    using(MemoryStream ms = new MemoryStream(data))
                    {
                        using(CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                        {
                            using(StreamReader sr = new StreamReader(cs))
                            {
                                result = sr.ReadToEnd();
                            }
                        }
                    }
                }
            }
            else
            {
                using (AesManaged aes = new AesManaged())
                {
                    aes.Key = _config.contentKey;
                    aes.IV = _config.contentIV;
                    ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
                    using (MemoryStream ms = new MemoryStream(data))
                    {
                        using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                        {
                            using (StreamReader sr = new StreamReader(cs,Encoding.UTF8))
                            {
                                result = sr.ReadToEnd();
                            }
                        }
                    }
                }
            }
            return result;
        }
    }
}
