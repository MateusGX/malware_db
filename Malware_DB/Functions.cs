using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.IO;
using System.Security.Cryptography;
namespace Malware_DB
{
    class Functions
    {
        public enum wType { Error, Info, Success, Default }
        public Config _config;
        public Functions(Config config)
        {
            _config = config;
        }
        public void showTitle()
        {
            Console.WriteLine(@"
 ███╗   ███╗ █████╗ ██╗     ██╗    ██╗ █████╗ ██████╗ ███████╗        ██████╗ ██████╗ 
 ████╗ ████║██╔══██╗██║     ██║    ██║██╔══██╗██╔══██╗██╔════╝        ██╔══██╗██╔══██╗
 ██╔████╔██║███████║██║     ██║ █╗ ██║███████║██████╔╝█████╗          ██║  ██║██████╔╝
 ██║╚██╔╝██║██╔══██║██║     ██║███╗██║██╔══██║██╔══██╗██╔══╝          ██║  ██║██╔══██╗
 ██║ ╚═╝ ██║██║  ██║███████╗╚███╔███╔╝██║  ██║██║  ██║███████╗███████╗██████╔╝██████╔╝
 ╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝ ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═════╝ ╚═════╝ 
 by MateusGX
");
        }
        public string[] readLine()
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write(" ╔═[");
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.Write(_config.user);
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write("]═[");
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.Write("~");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("]");
            Console.Write(" ╚═══>");
            Console.ResetColor();
            string input = Console.ReadLine();
            return input.Split(' ');
        }
        public bool runCommand(string[] command)
        {
            if (command[0] == "help")
            {
                writeLine("==== SYSTEM ====", wType.Success);
                writeLine("help", wType.Success, "List all commands");
                writeLine("clear", wType.Success, "Clear console");
                writeLine("exit", wType.Success, "Exit application", true);
                writeLine("==== APP ====", wType.Success);
                writeLine("show_all", wType.Success, "Show all malware");
                writeLine("select", wType.Success, "Select malware: select ID");
                writeLine("get_data", wType.Success, "Returns information about the malware");
                writeLine("update", wType.Success, "Updates the database and the application");
                writeLine("binaries", wType.Success, "Gets the executable of the selected malware (DANGER)");
                writeLine("source", wType.Success, "Gets the source code of the selected malware", true);
                return true;
            }
            else if (command[0] == "clear")
            {
                Console.Clear();
                Console.Write("\n");
                return true;
            }
            else if (command[0] == "exit")
            {
                writeLine("Bye!", wType.Success);
                Thread.Sleep(1000);
                Environment.Exit(0);
                return true;
            }
            else if (command[0] == "show_all")
            {
                return true;
            }
            else if (command[0] == "select")
            {
                return true;
            }
            else if (command[0] == "get_data")
            {
                return true;
            }
            else if (command[0] == "update")
            {
                return true;
            }
            else if (command[0] == "binaries")
            {
                return true;
            }
            else if (command[0] == "source")
            {
                return true;
            }
            return false;
        }
        public void writeLine(string content, wType type, string info = "", bool lb = false)
        {
            if (type == wType.Error)
            {
                Console.ForegroundColor = ConsoleColor.Red;
            }
            else if (type == wType.Info)
            {
                Console.ForegroundColor = ConsoleColor.Cyan;
            }
            else if (type == wType.Success)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
            }
            else if (type == wType.Default)
            {
                Console.ForegroundColor = ConsoleColor.White;
            }
            Console.WriteLine(" " + content);
            if (info != "")
            {
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.Write("   " + info);
            }
            if (lb)
            {
                Console.Write("\n\n");
            }
            else
            {
                Console.Write("\n");
            }
            Console.ResetColor();
        }
        public void progress(int _progress)
        {
            Console.Write(" Loading...\n [");
            for (int i = 0; i < _progress; i++)
            {
                Console.Write("#");
            }
            Console.Write("] - " + _progress + "%\n");
        }
        public string decrypt(string data, bool content = false)
        {
            string result;
            byte[] _data = Convert.FromBase64String(data);
            if (!content)
            {
                using (AesManaged aes = new AesManaged())
                {
                    aes.Key = _config.mwKey;
                    aes.IV = _config.mwIV;
                    ICryptoTransform decryptor = aes.CreateEncryptor(aes.Key, aes.IV);
                    using(MemoryStream ms = new MemoryStream(_data))
                    {
                        using(CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                        {
                            using(StreamReader sr = new StreamReader(cs))
                            {
                                result = sr.ReadToEnd();
                            }
                        }
                    }
                }
            }
            else
            {
                using (AesManaged aes = new AesManaged())
                {
                    aes.Key = _config.contentKey;
                    aes.IV = _config.contentIV;
                    ICryptoTransform decryptor = aes.CreateEncryptor(aes.Key, aes.IV);
                    using (MemoryStream ms = new MemoryStream(_data))
                    {
                        using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read))
                        {
                            using (StreamReader sr = new StreamReader(cs))
                            {
                                result = sr.ReadToEnd();
                            }
                        }
                    }
                }
            }
            return result;
        }
    }
}
